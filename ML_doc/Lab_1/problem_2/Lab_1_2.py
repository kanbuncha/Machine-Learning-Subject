#!/usr/bin/env python
# coding: utf-8

# # Problem 2

# In[2]:


# problem 2
df = problem_2[['accelerateX', 'accelerateY', 'accelerateZ']]

df.describe()

# ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô zero mean 
for column in df.columns :
    df[column] = df.apply(lambda row: (row[column] - df[column].mean()), axis=1)
df

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ covariance matrix ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• df
covariance_matrix = np.dot(df.T, df) / (len(df) -1)
covariance_matrix

### 2.2 eigenvalue and eigenvecter

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ eigenvalue / eigenvector ‡∏à‡∏≤‡∏Å covariance matrix 
eigenvalue, eigenvecter = np.linalg.eig(covariance_matrix)
print('eigenvalue:', eigenvalue)
print('eigenvecter:', eigenvecter)

###  2.3 Graph

# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á (Bar graph) ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ Eigenvalue ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
plt.bar(np.arange(3), height=np.sort(eigenvalue)[::-1], width=0.8, align='center', edgecolor='k')

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Eigenvector ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤ Eigenvalue
ev1 = eigenvecter[: ,0] * np.sqrt(eigenvalue[0])
ev2 = eigenvecter[: ,1] * np.sqrt(eigenvalue[1])
ev3 = eigenvecter[: ,2] * np.sqrt(eigenvalue[2])
print(ev1, ev2, ev3)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á feature ‡πÅ‡∏•‡∏∞ eigen vector
fig = plt.figure(figsize=(35, 8))

ax = fig.add_subplot(141, projection='3d')
ax.plot(df['accelerateX'], df['accelerateY'], df['accelerateZ'], 'o', markersize=10, color='green', alpha=0.2)
ax.plot([df['accelerateX'].mean()], [df['accelerateY'].mean()], [df['accelerateZ'].mean()], 'o', markersize=10, color='red', alpha=0.5)

ax.plot([0, ev1[0]], [0, ev1[1]], [0, ev1[2]], color='red', alpha=0.8, lw=2)
ax.plot([0, ev2[0]], [0, ev2[1]], [0, ev2[2]], color='violet', alpha=0.8, lw=2)
ax.plot([0, ev3[0]], [0, ev3[1]], [0, ev3[2]], color='cyan', alpha=0.8, lw=2)

ax.set_xlabel('x')
ax.set_xlabel('y')
ax.set_xlabel('z')

ax.view_init(30, -60)

plt.show()

### 2.4 PCA

print('eigenvalue:', eigenvalue)
print('eigenvecter:', eigenvecter)

# ‡∏•‡∏î‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å 3D features ùë• (accelerateX, accelerateY, accelerateZ) ‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2D ‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å eigenvector 2 vector ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
x_pca = np.dot(np.take(eigenvecter,np.argsort(eigenvalue)[1:].tolist(),axis=0), df.T)
df_x_pca = pd.DataFrame(x_pca)
df_x_pca

# ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û df_x_pca ‡∏î‡πâ‡∏ß‡∏¢ heatmap
sns.heatmap(df_x_pca)


# ### 2.1 covariance_matrix
